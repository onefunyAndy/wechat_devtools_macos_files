;!function(require, directRequire){;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const path=require("path"),fs=require("fs"),zlib=require("zlib"),log=require('./72653d4b93cdd7443296229431a7aa9a.js'),request=require('./15ba1827c7f6564a45df6bd44da3a977.js'),baseRequest=require('./233d77ecf0781f44985f684f70e316d0.js'),urlConfig=require('./f171257bbcaef547a3cf27266ccb0db2.js'),dirConfig=require('./92320c1386e6db6a6f2556736a9bc280.js'),idepluginManager=require('./f5a748840b272d2bf0223c95f6c8dbe3.js'),tools=require('./84b183688a46c9e2626d3e6f83365e13.js'),unpack=require('./514d358c669501bba65151a1ad61ae2f.js'),mkdir=require("mkdir-p"),signature_1=require('./c3cff51847d72be47e57256891296359.js'),CHECK_INTERVAL=600000;let loopTimer=null,downloadLock=!1;const downloaded={};async function getOnlinePluginList(){const a={url:urlConfig.getPluginList,needToken:1},{body:b}=await request(a),c=b.baseresponse||{},d=c.errcode;return b.plugin_list}async function doCheckUpdate(){const a=await getOnlinePluginList();handleRequestResult(a)}function gunzipPack(a){return new Promise((b,c)=>{zlib.gunzip(a,(a,d)=>{a?c(a):b(d)})})}async function installPlugin(a,b){const c=path.join(dirConfig.WeappPlugin,a.plugin_id);try{const d=fs.readFileSync(b),e=await gunzipPack(d),f=unpack(e),g=JSON.parse(f["/manifest.json"]);if(g.version===a.version){for(const a in f){const b=path.join(c,a);mkdir.sync(path.dirname(b)),fs.writeFileSync(b,f[a])}idepluginManager.cleanFileCache(a.plugin_id)}}catch(b){log.error(`installPlugin ${a.plugin_id} ${a.version} catch error ${b}`);try{fs.unlinkSync(path.join(c,"./manifest.json"))}catch(a){}}fs.unlinkSync(b)}function downloadPlugin(a){const b=`${a.plugin_id}_${a.version}.wxpkg`,c=path.join(dirConfig.WeappApplication,b);return fs.existsSync(c)&&signature_1.checkFileMd5Signature(c,a.checksum)?void installPlugin(a,c):void(downloadLock||(downloadLock=!0,baseRequest({url:a.download_url,encoding:null},(b)=>{return downloaded[a.plugin_id]||(downloaded[a.plugin_id]={}),downloaded[a.plugin_id][a.version]=!0,downloadLock=!1,b?void log.error(`downloadPlugin ${a.plugin_id} ${a.version} fail ${b}`):void process.nextTick(()=>{signature_1.checkFileMd5Signature(c,a.checksum)&&installPlugin(a,c)})}).pipe(fs.createWriteStream(c))))}function handleRequestResult(a){const b=idepluginManager.getInstalledPluginManifest();for(const c of a){if(c.deleted)continue;if(-1===tools.compareSemVer(global.appVersion,c.min_devtool_version))continue;const a=b[c.plugin_id];a&&1!==tools.compareSemVer(c.version,a.version)||downloaded[c.plugin_id]&&downloaded[c.plugin_id][c.version]||downloadPlugin(c)}}function clearLoopTimer(){loopTimer&&(clearInterval(loopTimer),loopTimer=null)}exports.clearLoopTimer=clearLoopTimer;async function loop(){clearLoopTimer(),loopTimer=setInterval(()=>{try{doCheckUpdate()}catch(a){}},CHECK_INTERVAL)}exports.loop=loop;
;}(require("lazyload"), require);
