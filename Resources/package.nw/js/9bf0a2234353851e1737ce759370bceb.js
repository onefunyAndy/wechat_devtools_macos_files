;!function(require, directRequire){;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const babelCodeFrame=require("babel-code-frame"),fs=require("fs"),OSPath=require("path"),babel=require("babel-core"),babylon=require("babylon"),babel_traverse_1=require("babel-traverse");class TranslateResult{constructor(){this.translated=!0,this.errMsg="",this.debugs=[],this.translatedContent="",this.fullPath=""}}function getErrorCodeFrame(a,b){const c=[];for(const d of b){const b=0<d.column?d.column:0,e=babelCodeFrame(a,d.line,b);c.push(`${d.reason}\n${e}`)}return c.join("\n\n")}exports.tryTranslateSingleFile=(a)=>{const b=new TranslateResult,{rootPath:c,filePath:d,nameMapping:e}=a;let f=OSPath.posix.dirname(d);"."===f&&(f="");let g=a.code;g||(g=fs.readFileSync(OSPath.join(c,d),"utf8"));const h=babylon.parse(g),i=[];if(a.check&&babel_traverse_1.default(h,{AssignmentExpression(a){const b=a.node.loc.start;"Identifier"===a.node.left.type&&"require"===a.node.left.name&&i.push({line:b.line,column:b.column,reason:`assigning other name with 'require'`}),"Identifier"===a.node.right.type&&"require"===a.node.right.name&&i.push({line:b.line,column:b.column,reason:`'require' should not be renamed`})},VariableDeclarator(a){const b=a.node.loc.start;a.node.id&&"Identifier"===a.node.id.type&&"require"===a.node.id.name&&i.push({line:b.line,column:b.column,reason:`(init) assigning other name with 'require'`}),a.node.init&&"Identifier"===a.node.init.type&&"require"===a.node.init.name&&i.push({line:b.line,column:b.column,reason:`(init) 'require' should not be renamed`})},CallExpression(a){const b=a.node.loc.start;for(const c of a.node.arguments)"Identifier"===c.type&&"require"===c.name&&i.push({line:b.line,column:b.column,reason:`passing 'require' as a parameter is not a good taste`});if("Identifier"===a.node.callee.type&&"require"===a.node.callee.name&&(1!==a.node.arguments.length||"StringLiteral"!==a.node.arguments[0].type)&&i.push({line:b.line,column:b.column,reason:`'require' requires one and only one static string literal`}),"require"===a.node.callee.name&&1===a.node.arguments.length&&"StringLiteral"===a.node.arguments[0].type){let d=a.node.arguments[0].value;/\.js$/.test(d)||(d+=".js"),fs.existsSync(OSPath.join(c,f,d))||i.push({line:b.line,column:b.column,reason:`file '${d}' not found please check`})}},Identifier(a){const b=a.node.loc.start;"require"===a.node.name&&"CallExpression"!==a.parent.type&&i.push({line:b.line,column:b.column,reason:`require is not being used properly in '${a.parent.type}'`})}}),0<i.length)return b.translated=!1,b.errMsg=`in ${d}\n${getErrorCodeFrame(g,i)}`,b;babel_traverse_1.default(h,{CallExpression(a){if("require"===a.node.callee.name&&1===a.node.arguments.length&&"StringLiteral"===a.node.arguments[0].type){const c=a.node.arguments[0].value;let g=OSPath.posix.join(f,c);if(/\.js$/.test(g)||(g+=".js"),!e[g])b.debugs.push([d,c,"ignored"]);else if(!e[d]){const h=OSPath.posix.relative(f,"./")+"/"+e[g];a.node.arguments[0].value=h,b.debugs.push([d,c,"replace",[g,h]])}else a.node.arguments[0].value=e[g],b.debugs.push([d,c,"replace",[g,e[g]]])}}});const j=babel.transformFromAst(h);return b.translatedContent=j.code||"",b};
;}(require("lazyload"), require);
