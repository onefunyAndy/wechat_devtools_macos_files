'use strict';var _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a};!function(require,directRequire){function a(){const a=d.getUserInfo();return _extends({},a,{loginStatus:a.signatureExpiredTime>Date.now()?c.SUCCESS:c.EXPIRED,accountMap:{}})}const b=require('./0634ee2ebd3e560d9d4804ecc960160f.js'),{LOGIN_STATUS:c}=require('./56c390e04c10e91a4aa2a2c19d9a885d.js'),d=require('./89ba85d67a88f7636d657c22b5d3e038.js'),{REHYDRATE:e}=require('redux-persist/constants'),f=require('lodash');module.exports=function(d=a(),g){switch(g.type){case b.USER_LOGIN_SUCCESS:return _extends({},d,g.userInfo,{loginStatus:c.SUCCESS});case b.USER_LOGIN_REQUEST:return _extends({},d,{loginStatus:c.REQUEST});case b.USER_LOGIN_PENDING:return _extends({},d,{loginStatus:c.PENDING});case b.USER_LOGIN_SUCCESS:case b.LOGIN_AND_GOTO:return _extends({},d,g.user,{loginStatus:c.SUCCESS});case b.USER_LOGIN_FAIL:return{accountMap:d.accountMap,loginStatus:c.FAIL,syncTime:d.syncTime};case b.USER_LOGIN_CANCAL:return{accountMap:d.accountMap,loginStatus:c.CANCEL,syncTime:d.syncTime};case b.USER_LOGIN_EXPIRED:return{accountMap:d.accountMap,loginStatus:c.EXPIRED,syncTime:d.syncTime};case b.USER_UPDATE_INFO:return _extends({},d,g.userInfo);case b.USER_SYNC_STORE:return _extends({},g.data,{syncTime:g.syncTime});case b.USER_ADD_ACCOUNT:return _extends({},d,{accountMap:_extends({},d.accountMap,{[g.data.openid]:_extends({},g.data.userInfo)})});case b.USER_REMOVE_ACCOUNT:{const a=_extends({},d.accountMap);return g.data.openids.forEach((b)=>{delete a[b]}),_extends({},d,{accountMap:a})}case b.USER_UPDATE_ACCOUNT_STATUS:{const a=d.accountMap[g.data.openid];return a?_extends({},d,{accountMap:_extends({},d.accountMap,{[g.data.openid]:_extends({},a,{loginStatus:g.data.status})})}):d}case b.USER_UPDATE_ACCOUNT:return _extends({},d,{accountMap:_extends({},d.accountMap,{[g.data.openid]:_extends({},g.data.userInfo)})});case e:{const a=g.payload.user||{},b=f.merge(f.cloneDeep(d.accountMap),a.accountMap||{});for(const a in b){const d=b[a];d.signatureExpiredTime>Date.now()&&(d.loginStatus=d.signatureExpiredTime>Date.now()?c.SUCCESS:c.EXPIRED)}return _extends({},d,{accountMap:b})}default:return d;}}}(require('lazyload'),require);