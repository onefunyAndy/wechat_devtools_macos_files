;!function(require, directRequire){;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const crypto=require("crypto"),log=require('./72653d4b93cdd7443296229431a7aa9a.js'),MAX_ONTIME_TOKEN=100;class TokenManager{constructor(){this.sessionTokenMap={},this.oneTimeTokenMap={}}generateToken(){const a=crypto.createHash("md5");return a.update(Math.random()+""+Date.now()),a.digest("hex")}getOnTimeToken(a){Object.keys(this.oneTimeTokenMap).length>MAX_ONTIME_TOKEN&&(log.error(`onTimeTokenMap exceed ${MAX_ONTIME_TOKEN}; clean all`),this.oneTimeTokenMap={});const b=this.generateToken();this.oneTimeTokenMap[b]=a||!0}getSessionToken(a="all"){return this.sessionTokenMap[a]?this.sessionTokenMap[a]:(this.sessionTokenMap[a]=this.generateToken(),this.sessionTokenMap[a])}validateSessionToken(a,b="all"){return!(this.sessionTokenMap[b]!==a)}validateOneTimeToken(a,b){const c=this.oneTimeTokenMap[a];return!0===c?(delete this.oneTimeTokenMap[a],!0):b&&c===b&&(delete this.oneTimeTokenMap[a],!0)}}var validType;(function(a){a.UA_TOKEN="UA_TOKEN"})(validType=exports.validType||(exports.validType={})),exports.tokenManager=new TokenManager;
;}(require("lazyload"), require);
