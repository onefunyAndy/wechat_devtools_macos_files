'use strict';!function(require,directRequire){const a=require('events').EventEmitter,b={normal:'normal',timeout:'timeout',detach:'detach',error:'error'},c={WEBVIEW_ADDED:'WEBVIEW_ADDED',REQUEST_ADDED:'REQUEST_ADDED',REQUEST_ENDED:'REQUEST_ENDED'},d=(a)=>new Promise((b)=>setTimeout(b,a));const e=new class extends a{constructor(){super(),this.webviews={},this._reverseMapping={},this._triggerId=1,this.on(c.REQUEST_ENDED,this._onRequestEnded.bind(this))}getWebviewInfo(a){return this.webviews[a]}addWebview(a,b,{isAppservice:d=!1}={}){a||console.trace(),this.webviews[a]={webview:b,isAppservice:d,requestInfo:{requests:{},stats:{}},triggers:{request:{}}},d&&(this._reverseMapping.appservice=a);const e=b.request;e.onBeforeRequest.addListener(this.getOnBeforeRequestHandlerForWebview(a),{urls:['<all_urls>']},['blocking']),e.onCompleted.addListener(this.getOnCompletedHandlerForWebview(a),{urls:['<all_urls>']},['responseHeaders']),e.onErrorOccurred.addListener(this.getOnErrorOccurredHandlerForWebview(a),{urls:['<all_urls>']}),this.emit(c.WEBVIEW_ADDED,a,b)}removeWebview(a){const c=this.webviews[a];if(c)for(const a in c.triggers.request)try{c.triggers.request[a].resolve(b.detach)}catch(a){}delete this.webviews[a]}getOnBeforeRequestHandlerForWebview(a){return(b)=>{if(this.webviews[a]){const d={startTime:parseInt(b.timeStamp),type:b.type};this.webviews[a].requestInfo.requests[b.requestId]=d,this.emit(c.REQUEST_ADDED,a,d)}}}getOnCompletedHandlerForWebview(a){return(b)=>{this.webviews[a]&&(delete this.webviews[a].requestInfo.requests[b.requestId],this.emit(c.REQUEST_ENDED,b.requestId))}}getOnErrorOccurredHandlerForWebview(a){return(b)=>{this.webviews[a]&&(delete this.webviews[a].requestInfo.requests[b.requestId],this.emit(c.REQUEST_ENDED,b.requestId))}}onceAllRequestsFinished(a,{maxWaitTimeout:c=5e3,includeAppservice:d=!0}={}){return new Promise((d,e)=>{if(this.webviews[a]&&this.webviews[this._reverseMapping.appservice]){const e=[...Object.keys(this.webviews[a].requestInfo.requests),...Object.keys(this.webviews[this._reverseMapping.appservice].requestInfo.requests)];if(0===e.length)return d(b.normal);const f=+new Date,g=this._getNewTriggerId();let h;c&&(h=setTimeout(()=>{this.webviews[a]?(this.webviews[a].triggers.request[g]&&(delete this.webviews[a].triggers.request[g],h=void 0),d(b.timeout)):d(b.error)},c));const i={[a]:!1,appservice:!1};this.webviews[a].triggers.request[g]={time:f,timeoutId:h,resolve:d,untilEmpty:!0,onClear:(a)=>{for(const b in i[a]=!0,i)if(!i[b])return;h&&clearTimeout(h),d(b.normal)}}}else e(`webviewID ${a} not exisits in webview manager (${JSON.stringify(Object.keys(this.webviews))})`)})}onceAllRequestsStartedBeforeNowFinished(a,{maxWaitTimeout:c=5e3,includeAppservice:d=!0}={}){return new Promise((e,f)=>{if(this.webviews[a]&&this.webviews[this._reverseMapping.appservice]){let f;if(f=d?[...Object.keys(this.webviews[a].requestInfo.requests),...Object.keys(this.webviews[this._reverseMapping.appservice].requestInfo.requests)]:Object.keys(this.webviews[a].requestInfo.requests),0===f.length)return e(b.normal);const g=+new Date,h=this._getNewTriggerId();let i;c&&(i=setTimeout(()=>{this.webviews[a]?(this.webviews[a].triggers.request[h]&&(delete this.webviews[a].triggers.request[h],i=void 0),e(b.timeout)):e(b.error)},c)),this.webviews[a].triggers.request[h]={time:g,timeoutId:i,resolve:e,set:new Set(f),onClear:()=>{i&&clearTimeout(i),e(b.normal)}}}else f(`webviewID ${a} not exisits in webview manager (${JSON.stringify(Object.keys(this.webviews))})`)})}onceWebviewStable(a,{maxWaitTimeout:c=5e3}={}){return new Promise(async(e,f)=>{if(this.webviews[a]&&this.webviews[this._reverseMapping.appservice])try{let f=!1;setTimeout(()=>{f||e(b.timeout)},c),await this.onceAllRequestsStartedBeforeNowFinished(this._reverseMapping.appservice,{maxWaitTimeout:c,includeAppservice:!1}),await d(100);const g=await this.onceAllRequestsStartedBeforeNowFinished(a,{maxWaitTimeout:c,includeAppservice:!1});e(g),f=!0}catch(a){f(a)}else f(`webviewID ${a} not exisits in webview manager (${JSON.stringify(Object.keys(this.webviews))})`)})}_onRequestEnded(a){for(const b in this.webviews){const c=this.webviews[b];for(const d in c.triggers.request){const e=c.triggers.request[d];e.set?e.set.has(a)&&(e.set.delete(a),0===e.set.size&&e.onClear()):e.untilEmpty&&0===Object.keys(c.requestInfo.requests).length&&e.onClear(b)}}}_getNewTriggerId(){return this._triggerId++}};window.mgr=e,module.exports={get manager(){return e},EVENTS:c,RequestResourceType:{image:'image',media:'media',script:'script',stylesheet:'stylesheet'}}}(require('lazyload'),require);