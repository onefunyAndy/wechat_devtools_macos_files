'use strict';!function(require,directRequire){const a=require('react'),b=require('querystring'),c=require('./a78e6d6a87de1708226375ca4c320d76.js'),d=require('./6b70fc1a2dbee232784064c344aaaf2b.js'),e=require('./e3681b47a6ce46a8998b8cdff40bdb12.js'),f=require('./72653d4b93cdd7443296229431a7aa9a.js'),{validType:g,tokenManager:h}=require('./dc244a5ba483ad6e0acd267d3b91b282.js');class i extends a.Component{constructor(a){super(a),this.viewMap={},this.callbackQueue={}}componentDidMount(){this._onNativeViewMessage=this.onNativeViewMessage.bind(this)}componentWillReceiveProps(a){a.height==this.props.height&&a.width==this.props.width,a.compileCommand!=this.props.compileCommand&&this.restart(),a.operateNativeView!=this.props.operateNativeView&&this.operateNativeView(a.operateNativeView)}componentWillUnmount(){this.removeAllView()}restart(){this.removeAllView()}operateNativeView(a){if(a)switch(a.action){case'insert':{this.insertView(a);break}case'update':{this.updateView(a);break}case'remove':{this.removeView(a);break}case'operate':this.operateView(a);}}insertView(a){if(!a||'insert'!=a.action)return;if(!a.position||!a.position.hasOwnProperty('left')||!a.position.hasOwnProperty('top')||!a.position.hasOwnProperty('width')||!a.position.hasOwnProperty('height'))return void this.props.assdkCallback({callbackID:a.callbackID,res:{errMsg:`${a.api}:fail param position error`}});let{left:e,top:f,width:i,height:j}=a.position;const k=this.props.deviceScale;i/=k,j=i/k;const l=`${a.name}${a.id}`;if(this.viewMap[l])return void this.props.assdkCallback({callbackID:a.callbackID,res:{errMsg:`${a.api}:fail already exist`}});const m=this.webview=c.get('simulator',{width:i,height:j,dpr:this.props.dpr});m.needDebugger=1,m.onBeforeRequest=(a)=>{if(/^file:\/\//i.test(a.url))return{cancel:!0}};const n=h.getSessionToken(g.UA_TOKEN);m.setUserAgentOverride(`wechatdevtools port/${global.messageCenterPort} gamenativeview/${l} token/${n}`),m.setAttribute('allowtransparency',!0),m.setAttribute('style',`position:absolute;left:${e}px;top:${f}px;height:${j}px;width:${i}px;pointer-events:initial;`),a.data.id=l,a.data.videoPlayerId=a.id;const o={data:JSON.stringify(a.data),name:a.name};m.src=`http://127.0.0.1:${global.proxyPort}/game/nativeview.html?${b.stringify(o)}`,m.attach(this.container),d.register(l,this._onNativeViewMessage),this.viewMap[l]=m,this.callbackQueue[l]=a}removeView(a){if(a&&'remove'==a.action){const b=`${a.name}${a.id}`,c=this.viewMap[b];return c?void(c.detach(),d.unRegister(b,this._onNativeViewMessage),delete this.viewMap[b],this.props.assdkCallback({callbackID:a.callbackID,res:{errMsg:`${a.api}:ok`}})):void this.props.assdkCallback({callbackID:a.callbackID,res:{errMsg:`${a.api}:fail not found`}})}}updateView(a){if(a&&'update'==a.action){const b=`${a.name}${a.id}`,c=this.viewMap[b];if(!c)return void this.props.assdkCallback({callbackID:a.callbackID,res:{errMsg:`${a.api}:fail not found`}});if(a.position){let{left:b,top:d,width:e,height:f}=a.position;const g=this.props.deviceScale;e/=g,f=e/g,c.setAttribute('style',`position:absolute;left:${b}px;top:${d}px;height:${f}px;width:${e}px;pointer-events:initial;`)}d.triggerOnEvent({webviewID:b,eventName:'updateNativeView',data:a.data}),this.props.assdkCallback({callbackID:a.callbackID,res:{errMsg:`${a.api}:ok`}})}}operateView(a){if(a&&'operate'==a.action){const b=`${a.name}${a.id}`,c=this.viewMap[b];return c?void(d.triggerOnEvent({webviewID:b,eventName:'operateNativeView',data:a.data}),this.props.assdkCallback({callbackID:a.callbackID,res:{errMsg:`${a.api}:ok`}})):void this.props.assdkCallback({callbackID:a.callbackID,res:{errMsg:`${a.api}:fail not found`}})}}onNativeViewMessage(a){let b={};try{if(b=JSON.parse(a),'WEBVIEW_PUBLISH'==b.command){const a=b.data.eventName,c=b.fromWebviewID,d=this.viewMap[c];if('videoPlayerInsert'!=a)'onNativeViewEvent'==a&&e.triggerOnEvent({eventName:b.data.data.eventName,data:b.data.data.data});else if(this.callbackQueue[c]){const a=this.callbackQueue[c];this.props.assdkCallback({callbackID:a.callbackID,res:{errMsg:`${a.api}:ok`}}),delete this.callbackQueue[c]}}}catch(b){f.error(`onNativeViewMessage catch ${a} error ${b}`)}}removeAllView(){for(const a in this.viewMap)this.viewMap[a]&&(this.viewMap[a].detach(),d.unRegister(a,this._onNativeViewMessage));this.viewMap={}}render(){const b=this.props,c={height:b.height,width:b.width,position:'absolute',pointerEvents:'none'};return a.createElement('div',{className:'webview',ref:(a)=>this.container=a,style:c})}}module.exports=i}(require('lazyload'),require);